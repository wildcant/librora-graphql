# 
# -------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# -------------------------------------------------------
#

scalar Date

scalar JSON

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

enum ESort {
  ASC
  DESC
}

type ValidateActionPayload {
  message: String
  valid: Boolean!
}

type ResendVerificationEmail {
  success: Boolean
  message: String
}

type Mutation {
  validateAction(id: String!): ValidateActionPayload
  resendVerificationEmail(token: String!): ResendVerificationEmail
  signIn(input: SignInInput!): SignInPayload
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  verifyEmail(input: VerifyEmailInput!): VerifyEmailPayload
  reserve(input: ReserveInput): ReservePayload
}

input SignInInput {
  account: String!
  password: String!
}

type SignInPayload {
  user: User
  success: Boolean
  message: String
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordPayload {
  success: Boolean
  message: String
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

type ResetPasswordPayload {
  success: Boolean
  message: String
  user: User
}

type Editorial {
  name: String
}

type EditorialConnection {
  nodes: [Editorial!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Author {
  id: String!
  name: String!
}

type AuthorConnection {
  nodes: [Author!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  author(id: String!): Author
  book(id: String, slug: String): Book
  searchBooks(input: SearchBooksInput!): BookConnection!
  reservation(id: String!): Reservation
  topics: [Topic!]!
  user(id: String!): User
}

enum EFormat {
  EPUB
  PDF
  BOOK
}

enum ELanguage {
  ENGLISH
}

type Book {
  id: String!
  author: Author
  cover: String
  coverThumbnail: String
  date: String!
  description: String
  editorial: Editorial
  format: EFormat
  language: ELanguage
  numPages: Int!
  slug: String!
  subtitle: String
  title: String
  owner: User!
}

type BookConnection {
  nodes: [Book!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input BookFilters {
  freeText: String!
  author: ID
  language: ELanguage
}

input Pagination {
  offset: Int = 0
  limit: Int = 25
}

input BookSort {
  by: String = "id"
  order: ESort = ASC
}

input SearchBooksInput {
  filters: BookFilters!
  sort: BookSort
  pagination: Pagination!
}

type GeoJSON {
  type: String
  coordinates: JSON
}

type LatLngLiteral {
  lat: Float
  lng: Float
}

type Location {
  id: String!
  country: String
  city: String
  zipcode: String
  latitude: Float
  longitude: Float
  geojson: GeoJSON
  bounds: [LatLngLiteral]
}

enum EReservationState {
  PENDING
  WITHDRAWN
  DENIED
  CONFIRMED
  CANCELED
  EXPIRED
  ACTIVE
  RETURNED
}

enum EReservationChangeRequestState {
  CHANGE_PENDING
  CHANGE_CANCELLED
  CHANGE_DENIED
  CHANGE_CONFIRMED
}

type Reservation {
  id: String!
  state: EReservationState
  subState: EReservationChangeRequestState
}

type Topic {
  id: String!
  name: String!
}

enum EUserType {
  ADMIN
  USER
}

enum EUserRole {
  LENDER_BORROWER
  VISITOR
}

enum EAdminRole {
  SUPER
  BILLING
}

enum ECountryCode {
  CO
}

type User {
  id: String!
  books: BookConnection!
  countryCode: ECountryCode
  email: String!
  firstName: String!
  initial: String!
  isEmailValidated: Boolean!
  lastName: String!
  name: String
  role: EUserRole!
  type: EUserType!
  username: String!
  createdAt: Date!
  location: Location
}

type UserConnection {
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  username: String!
}

type CreateUserPayload {
  message: String
  success: Boolean
  user: User
}

input VerifyEmailInput {
  token: String!
}

type VerifyEmailPayload {
  success: Boolean
  message: String
}

input ReserveInput {
  bookId: String!
}

type ReservePayload {
  message: String
}

schema {
  query: Query
  mutation: Mutation
}