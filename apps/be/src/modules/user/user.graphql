enum EUserType {
  ADMIN
  USER
}

enum EUserRole {
  LENDER_BORROWER
  VISITOR
}

enum EAdminRole {
  SUPER
  BILLING
}

enum ECountryCode {
  CO
}

type User {
  id: String!
  books: BookConnection!
  countryCode: ECountryCode
  email: String!
  firstName: String!
  initial: String!
  isEmailValidated: Boolean!
  lastName: String!
  name: String
  role: EUserRole!
  type: EUserType!
  username: String!
}

type UserConnection {
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  username: String!
}

type CreateUserPayload {
  message: String
  success: Boolean
  user: User
}

input VerifyEmailInput {
  token: String!
}

type VerifyEmailPayload {
  success: Boolean
  message: String
}

input ReserveInput {
  bookId: String!
}

type ReservePayload {
  message: String
}

type Query {
  user(id: String!): User
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  verifyEmail(input: VerifyEmailInput!): VerifyEmailPayload
  reserve(input: ReserveInput): ReservePayload
}
